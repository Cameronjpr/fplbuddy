package components

import (
	"fmt"
	"github.com/cameronjpr/fplbuddy/core"
	"github.com/cameronjpr/fplbuddy/shared"
	"strconv"
)

templ Test() {
	<div class="flex flex-col gap-4 w-full bg-red-500">
		<h2>TEST</h2>
	</div>
}

templ TeamEntry(entry core.Entry) {
	<div id="team-entry" class="flex flex-col gap-4 w-full max-w-2xl m-auto">
		<div class="flex gap-4 items-center justify-between w-full">
			<button hx-get={ fmt.Sprintf("/team/%v/refresh?gw=%v", entry.Id, entry.Gameweek-1) } hx-target="#team-entry" hx-swap="outerHTML">Previous</button>
			<span class="font-bold text-lg">Gameweek { strconv.Itoa(entry.Gameweek) }</span>
			<button hx-get={ fmt.Sprintf("/team/%v/refresh?gw=%v", entry.Id, entry.Gameweek+1) } hx-target="#team-entry" hx-swap="outerHTML">Next</button>
		</div>
		<div class="bg-green-600 border-4 border-green-700 py-4 rounded-xl w-full">
			<div class="px-4">
				<div class="flex items-center justify-center border-4 border-green-200 w-16 h-16 relative top-0 right-0 bg-white rounded-full">
					<span class="font-bold">{ strconv.Itoa(entry.Total) }</span><span class="text-xs">pts</span>
				</div>
			</div>
			<div class="flex flex-col gap-4 w-full">
				<ul class="flex justify-center w-full gap-4">
					for _, p := range entry.Goalkeepers {
						@EntryPlayerCard(p)
					}
				</ul>
				<ul class="flex justify-center w-full gap-4">
					for _, p := range entry.Defenders {
						@EntryPlayerCard(p)
					}
				</ul>
				<ul class="flex justify-center w-full gap-4">
					for _, p := range entry.Midfielders {
						@EntryPlayerCard(p)
					}
				</ul>
				<ul class="flex justify-center w-full gap-4">
					for _, p := range entry.Forwards {
						@EntryPlayerCard(p)
					}
				</ul>
				<ul class="flex justify-center w-full gap-4 border-t-2 pt-4">
					for _, p := range entry.Bench {
						@EntryPlayerCard(p)
					}
				</ul>
			</div>
		</div>
	</div>
}

templ ErrorPage() {
	@layout() {
		<div class="flex flex-col gap-16">
			<h1 class="text-4xl font-bold">Error</h1>
			<p>Something went wrong</p>
		</div>
	}
}

templ EntryPlayerCard(p core.EntryPlayer) {
	<a class="w-1/5 flex" href={ templ.URL(fmt.Sprintf("/players/%v", strconv.Itoa(p.FplElementId))) }>
		<div class="w-full text-center flex flex-col overflow-hidden items-center gap-1">
			<img src={ fmt.Sprintf("/static/images/shirts/%s.webp", shared.GetCodeFromClubId(p.ClubId)) } width="48" height="48"/>
			<div class="text-xs flex flex-col gap-1 items-center ">
				<span class="font-bold truncate">{ p.Name }</span>
				<p class="text-lg bg-green-100 rounded-full px-2">{ strconv.Itoa(p.GwScore) }</p>
			</div>
		</div>
	</a>
}

templ EntrySummary() {
	<div class="flex flex-col gap-4 w-full">
		<h2>Eleventy Stupid</h2>
	</div>
}

templ PlayerSearchBar(results []core.Player) {
	<div
		id="search"
		class="w-full flex flex-col place-content-center"
	>
		<input
			id="search-input"
			name="search"
			type="search"
			placeholder="Search"
			minlength="3"
			autocomplete="off"
			hx-post="/search"
			hx-swap="outerHTML"
			hx-target="#search"
			hx-trigger="keyup changed delay:500ms"
		/>
		<div class="htmx-indicator"></div>
		if len(results) > 0 {
			<div class="flex flex-col p-1 gap-2 absolute w-72 bg-zinc-900 sm:w-96 top-16 pt-2 z-10">
				for _, p := range results {
					@PlayerGridCard(p)
				}
			</div>
			<div
				class="absolute top-0 left-0 w-full h-full bg-black opacity-50"
				hx-post="/search"
				hx-target="#search"
				hx-swap="outerHTML"
				hx-trigger="click"
			></div>
		}
	</div>
}

templ PlayersTable(playersResponse core.PlayersResponse, sortOptions map[string]string) {
	<div id="players-table" class="flex flex-col gap-4">
		<table class="w-full">
			<thead class="sticky top-0">
				<tr class="text-left grid grid-cols-5">
					<th><button hx-get={ sortOptions["name"] } hx-target="#players-table">Name</button></th>
					<th><button hx-get={ sortOptions["position"] } hx-target="#players-table">Position</button></th>
					<th><button hx-get={ sortOptions["form"] } hx-target="#players-table">Form</button></th>
					<th><button hx-get={ sortOptions["now_cost"] } hx-target="#players-table">Cost</button></th>
					<th><button hx-get={ sortOptions["club_id"] } hx-target="#players-table">Club</button></th>
				</tr>
			</thead>
			<tbody>
				for _, p := range playersResponse.Players {
					<tr class="text-left grid grid-cols-5">
						<td>
							<label class="py-4" name="player" for={ strconv.Itoa(p.FplElementId) }>
								<div class="h-6 w-6">
									<img src={ fmt.Sprintf("/static/images/shirts/%s.webp", shared.GetCodeFromClubId(p.ClubId)) } width="24" height="24"/>
								</div>
								<input type="checkbox" id={ strconv.Itoa(p.FplElementId) } name="player" value={ strconv.Itoa(p.FplElementId) }/>
								{ p.Name }
							</label>
						</td>
						<td>{ strconv.Itoa(p.Position) }</td>
						<td>{ strconv.FormatFloat(p.Form, 'f', -1, 32) }</td>
						<td>{ strconv.FormatFloat(p.NowCost, 'f', -1, 32) }</td>
						<td>{ shared.GetCodeFromClubId(p.ClubId) }</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

// Could pop up a modal with the players
templ PlayerComparisonPreview(players []core.Player) {
	<div class="flex flex-col gap-4">
		for _, p := range players {
			@PlayerGridCard(p)
		}
	</div>
}

templ PlayerGrid(players []core.Player) {
	<div class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4">
		for _, p := range players {
			@PlayerGridCard(p)
		}
	</div>
}

templ PlayerGridCard(p core.Player) {
	<a href={ templ.URL(fmt.Sprintf("/players/%v", strconv.Itoa(p.FplElementId))) } class="bg-zinc-900 rounded-sm p-3 py-4 flex flex-col gap-2 items hover:bg-zinc-800 hover:cursor-pointer h-24">
		<div class="flex gap-4 items-center">
			<div class="h-12 w-12">
				<img src={ fmt.Sprintf("/static/images/shirts/%s.webp", shared.GetCodeFromClubId(p.ClubId)) } width="48" height="48"/>
			</div>
			<div class="flex flex-col">
				<h3>{ p.Name }</h3>
				<div class="flex gap-2 items-center">
					<small class="cost-tag">Â£{ strconv.FormatFloat(p.NowCost, 'f', -1, 32) }m</small>
					<small>{ strconv.Itoa(p.GwScore) }pts</small>
				</div>
			</div>
		</div>
	</a>
}

templ PlayerKeyStats(p core.Player) {
	<div class="flex flex-col gap-2">
		<h2>Stats</h2>
		<div class="flex gap-2">
			<div class="w-20 h-12 font-mono border-2 border-zinc-700 rounded-full flex flex-col items-center justify-center">
				<p>{ strconv.Itoa(p.GwScore) }<span class="text-sm">pts</span></p>
				<small class="text-xs text-zinc-500">Points</small>
			</div>
			<div class="w-20 h-12 font-mono border-2 border-zinc-700 rounded-full flex flex-col items-center justify-center">
				<p>{ strconv.FormatFloat(p.NowCost, 'f', -1, 32) }<span class="text-sm">m</span></p>
				<small class="text-xs text-zinc-500">Cost</small>
			</div>
			<div class="w-20 h-12 font-mono border-2 border-zinc-700 rounded-full flex flex-col items-center justify-center">
				<p>{ strconv.FormatFloat(p.Form, 'f', 1, 32) }</p>
				<small class="text-xs text-zinc-500">Form</small>
			</div>
		</div>
	</div>
}

templ PlayerPerformanceStats(p core.Player) {
	<div class="flex flex-col gap-2">
		<h2>Performance stats</h2>
		<div class="flex gap-2">
			<div class="w-20 h-12 font-mono border-2 border-zinc-700 rounded-full flex flex-col items-center justify-center">
				<p>{ strconv.FormatFloat(p.ExpectedGoals, 'f', -1, 32) }</p>
				<small class="text-xs text-zinc-500" title="Expected Goals (xG)">xG</small>
			</div>
			<div class="w-20 h-12 font-mono border-2 border-zinc-700 rounded-full flex flex-col items-center justify-center">
				<p>{ strconv.FormatFloat(p.ExpectedAssists, 'f', -1, 32) }</p>
				<small class="text-xs text-zinc-500"  title="Expected Assists (xA)">xA</small>
			</div>
			<div class="w-20 h-12 font-mono border-2 border-zinc-700 rounded-full flex flex-col items-center justify-center">
				<p>{ strconv.FormatFloat(p.ExpectedGoalInvolvements, 'f', -1, 32) }</p>
				<small class="text-xs text-zinc-500"  title="Expected Goal Involvements (xGI)">xGI</small>
			</div>
			<div class="w-20 h-12 font-mono border-2 border-zinc-700 rounded-full flex flex-col items-center justify-center">
				<p>{ strconv.FormatFloat(p.ExpectedGoalsConceded, 'f', -1, 32) }</p>
				<small class="text-xs text-zinc-500"  title="Expected Goals Conceded (xGC)">xGC</small>
			</div>
		</div>
	</div>
}

templ FDRSchedule(schedule core.FDRSchedule) {
	<div class="flex flex-col gap-2 overflow-x-scroll">
		<div class="sticky grid grid-flow-col-dense gap-1">
			for i := range(38) {
				<p class="min-w-16 text-center">GW{ strconv.Itoa(i) }</p>
			}
		</div>
		<div class="flex flex-col gap-4">
			for i := range schedule {
				<h2 class="uppercase">{ shared.GetCodeFromClubId(i) }</h2>
				<div class="flex flex-col gap-1">
					<div class="grid grid-flow-col-dense gap-1 pb-2">
						for _, f := range schedule[i] {
							<div class="flex flex-col gap-2 p-2 rounded-sm font-semibold text-lg min-w-16 min-h-12 text-center" data-difficulty={ strconv.Itoa(f.Difficulty) }>
								<p class="uppercase">{ shared.GetCodeFromClubId(f.OpponentId) }</p>
								<small>{ strconv.Itoa(f.Difficulty) }</small>
							</div>
						}
					</div>
				</div>
			}
		</div>
	</div>
}
